//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/RTTUnitPlacement/1_InputSystem/PlacementInputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlacementInputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlacementInputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlacementInputController"",
    ""maps"": [
        {
            ""name"": ""PlacementControl"",
            ""id"": ""d4d951a8-3eea-408e-b4e7-6618b9b9d831"",
            ""actions"": [
                {
                    ""name"": ""RightClickMove"",
                    ""type"": ""Value"",
                    ""id"": ""aea697b2-e650-4d49-8526-c6c7932636e8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""StartPosition"",
                    ""id"": ""6b8e2771-cdde-4ef4-a1f6-6db76dae083b"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClickMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""24e83080-8887-455f-b060-c5c0213ca434"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""761890bc-524b-42fb-a5a7-ebdf3117e33a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClickMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlacementControl
        m_PlacementControl = asset.FindActionMap("PlacementControl", throwIfNotFound: true);
        m_PlacementControl_RightClickMove = m_PlacementControl.FindAction("RightClickMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlacementControl
    private readonly InputActionMap m_PlacementControl;
    private IPlacementControlActions m_PlacementControlActionsCallbackInterface;
    private readonly InputAction m_PlacementControl_RightClickMove;
    public struct PlacementControlActions
    {
        private @PlacementInputController m_Wrapper;
        public PlacementControlActions(@PlacementInputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClickMove => m_Wrapper.m_PlacementControl_RightClickMove;
        public InputActionMap Get() { return m_Wrapper.m_PlacementControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlacementControlActions set) { return set.Get(); }
        public void SetCallbacks(IPlacementControlActions instance)
        {
            if (m_Wrapper.m_PlacementControlActionsCallbackInterface != null)
            {
                @RightClickMove.started -= m_Wrapper.m_PlacementControlActionsCallbackInterface.OnRightClickMove;
                @RightClickMove.performed -= m_Wrapper.m_PlacementControlActionsCallbackInterface.OnRightClickMove;
                @RightClickMove.canceled -= m_Wrapper.m_PlacementControlActionsCallbackInterface.OnRightClickMove;
            }
            m_Wrapper.m_PlacementControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RightClickMove.started += instance.OnRightClickMove;
                @RightClickMove.performed += instance.OnRightClickMove;
                @RightClickMove.canceled += instance.OnRightClickMove;
            }
        }
    }
    public PlacementControlActions @PlacementControl => new PlacementControlActions(this);
    public interface IPlacementControlActions
    {
        void OnRightClickMove(InputAction.CallbackContext context);
    }
}
